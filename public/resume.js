// resume.js
document.addEventListener('DOMContentLoaded', function() {
  function getQueryParams() {
    const params = new URLSearchParams(window.location.search);
    return {
      type: params.get('type'),
      id: params.get('id')
    };
  }

  async function loadData() {
    try {
      const saisonsSnapshot = await db.collection('saisons').get();
      const sessionsSnapshot = await db.collection('sessions').get();
      const partiesSnapshot = await db.collection('parties').get();

      const saisons = saisonsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      const sessions = sessionsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      const parties = partiesSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));

      return { saisons, sessions, parties };
    } catch (err) {
      console.error("Erreur lors du chargement des donnÃ©es :", err);
      return { saisons: [], sessions: [], parties: [] };
    }
  }

  function createRankingChart(rankingArray) {
    // CrÃ©e un graphique en barres pour le classement
    const ctx = document.getElementById('rankingChart').getContext('2d');
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: rankingArray.map(item => item[0]),
        datasets: [{
          label: 'Score',
          data: rankingArray.map(item => item[1]),
          backgroundColor: 'rgba(74,144,226,0.5)',
          borderColor: 'rgba(74,144,226,1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  }

  function renderResume(data, type, id) {
    const container = document.getElementById('resume-content');
    let html = "";
    let breadcrumbCurrent = "";

    if (type === 'saison') {
      const saison = data.saisons.find(s => s.id === id);
      if (!saison) {
        html = "<p>Saison non trouvÃ©e.</p>";
        breadcrumbCurrent = "Saison non trouvÃ©e";
      } else {
        breadcrumbCurrent = saison.nom;
        html += `<h2>Saison : ${saison.nom}</h2>`;
        html += `<div class="info-section"><p><strong>ID :</strong> ${saison.id}</p>`;
        html += `<p><strong>Status :</strong> ${saison.finished ? "TerminÃ©e" : "Active"}</p></div>`;
        const sessions = data.sessions.filter(sess => sess.saisonId === saison.id);
        html += `<div class="info-section"><p><strong>Nombre de sessions :</strong> ${sessions.length}</p>`;
        let totalParties = 0;
        sessions.forEach(function(sess) {
          totalParties += data.parties.filter(function(p) { return p.sessionId === sess.id; }).length;
        });
        html += `<p><strong>Total de parties :</strong> ${totalParties}</p></div>`;
        // Calcul du classement pour la saison
        let seasonScores = {};
        sessions.forEach(function(sess) {
          const parties = data.parties.filter(function(p) { return p.sessionId === sess.id && p.finished; });
          parties.forEach(function(party) {
            Object.entries(party.scores).forEach(function([player, score]) {
              seasonScores[player] = (seasonScores[player] || 0) + score;
            });
          });
        });
        const seasonRanking = Object.entries(seasonScores).sort(function(a, b) { return a[1] - b[1]; });
        if (seasonRanking.length > 0) {
          html += `<h3>Classement de la saison</h3>`;
          html += "<ul class='detail-list'>";
          seasonRanking.forEach(function([player, score], index) {
            let emoji = index === 0 ? "ğŸ¥‡" : index === 1 ? "ğŸ¥ˆ" : index === 2 ? "ğŸ¥‰" : "";
            html += `<li>${emoji} ${index+1}. ${player}: ${score}</li>`;
          });
          html += "</ul>";
          html += `<h3>Graphique des scores</h3><canvas id="rankingChart"></canvas>`;
          // CrÃ©ation du graphique aprÃ¨s l'insertion du canvas
          setTimeout(() => createRankingChart(seasonRanking), 100);
        }
      }
    } else if (type === 'session') {
      const session = data.sessions.find(s => s.id === id);
      if (!session) {
        html = "<p>Session non trouvÃ©e.</p>";
        breadcrumbCurrent = "Session non trouvÃ©e";
      } else {
        breadcrumbCurrent = `Session du ${session.date}`;
        html += `<h2>Session : ${session.date}</h2>`;
        html += `<div class="info-section"><p><strong>ID :</strong> ${session.id}</p>`;
        html += `<p><strong>Status :</strong> ${session.finished ? "TerminÃ©e" : "Active"}</p></div>`;
        const parties = data.parties.filter(p => p.sessionId === session.id);
        html += `<div class="info-section"><p><strong>Nombre de parties :</strong> ${parties.length}</p></div>`;
        // Classement de la session
        let sessionScores = {};
        parties.filter(p => p.finished).forEach(function(party) {
          Object.entries(party.scores).forEach(function([player, score]) {
            sessionScores[player] = (sessionScores[player] || 0) + score;
          });
        });
        const sessionRanking = Object.entries(sessionScores).sort(function(a, b) { return a[1] - b[1]; });
        if (sessionRanking.length > 0) {
          html += `<h3>Classement de la session</h3>`;
          html += "<ul class='detail-list'>";
          sessionRanking.forEach(function([player, score], index) {
            let emoji = index === 0 ? "ğŸ¥‡" : index === 1 ? "ğŸ¥ˆ" : index === 2 ? "ğŸ¥‰" : "";
            html += `<li>${emoji} ${index+1}. ${player}: ${score}</li>`;
          });
          html += "</ul>";
          html += `<h3>Graphique des scores</h3><canvas id="rankingChart"></canvas>`;
          setTimeout(() => createRankingChart(sessionRanking), 100);
        }
      }
    } else if (type === 'partie') {
      const party = data.parties.find(p => p.id === id);
      if (!party) {
        html = "<p>Partie non trouvÃ©e.</p>";
        breadcrumbCurrent = "Partie non trouvÃ©e";
      } else {
        breadcrumbCurrent = `Partie ${party.id}`;
        html += `<h2>Partie : ${party.id}</h2>`;
        html += `<div class="info-section"><p><strong>Status :</strong> ${party.finished ? "TerminÃ©e" : "Active"}</p></div>`;
        if (!party.scores || Object.keys(party.scores).length === 0) {
          html += "<p>Aucun score disponible.</p>";
        } else {
          html += `<h3>Scores</h3>`;
          html += `<ul class="detail-list">`;
          Object.entries(party.scores).forEach(function([player, score]) {
            html += `<li><strong>${player}</strong>: ${score !== null ? score : "-"}</li>`;
          });
          html += `</ul>`;
          const totalScore = Object.values(party.scores).reduce(function(acc, val) { return acc + (val || 0); }, 0);
          html += `<p><strong>Total des scores :</strong> ${totalScore}</p>`;
        }
      }
    } else {
      html = "<p>Type non reconnu.</p>";
      breadcrumbCurrent = "Inconnu";
    }

    // Ajoute une citation inspirante
    const quotes = [
      "Le succÃ¨s n'est pas final, l'Ã©chec n'est pas fatal : c'est le courage de continuer qui compte. â€“ Winston Churchill",
      "Les grandes choses ne sont jamais faites par une seule personne. â€“ Steve Jobs",
      "Il faut viser la lune, car mÃªme en cas d'Ã©chec, on atterrit dans les Ã©toiles. â€“ Oscar Wilde",
      "Croyez en vous et tout devient possible.",
      "Le futur appartient Ã  ceux qui croient Ã  la beautÃ© de leurs rÃªves. â€“ Eleanor Roosevelt",
      "Chaque jour est une nouvelle chance de changer votre vie.",
      "Ils ne savaient pas que c'Ã©tait impossible, alors ils l'ont fait. â€“ Mark Twain",
      "Le succÃ¨s, c'est tomber sept fois et se relever huit. â€“ Proverbe japonais",
      "Faites de votre vie un rÃªve, et d'un rÃªve, une rÃ©alitÃ©. â€“ Antoine de Saint-ExupÃ©ry",
      "Ne rÃªve pas ta vie, vis tes rÃªves.",
      "L'homme sage apprend plus de ses ennemis que l'imbÃ©cile de ses amis. â€“ Baltasar GraciÃ¡n",
      "La vie, c'est comme une bicyclette, il faut avancer pour ne pas perdre l'Ã©quilibre. â€“ Albert Einstein",
      "Le problÃ¨me dans le monde, c'est que les idiots sont pleins de certitudes, et les gens intelligents remplis de doutes. â€“ Bertrand Russell",
      "Si l'erreur est humaine, alors qui a inventÃ© la correction automatique ?",
      "Pourquoi prendre la vie au sÃ©rieux ? De toute faÃ§on, on n'en sortira pas vivant. â€“ Alphonse Allais",
      "Jâ€™ai tentÃ© dâ€™Ãªtre normal une foisâ€¦ Mes pires cinq minutes.",
      "Do, or do not. There is no try. â€“ Yoda",
      "Le geek ne vieillit pas, il level up.",
      "La seule faÃ§on de faire du bon travail, c'est d'aimer ce que vous faites. â€“ Steve Jobs",
      "Rien n'est impossible, seules les limites de notre esprit dÃ©finissent certaines choses comme inconcevables. â€“ NapolÃ©on Bonaparte",
      "Le plus grand Ã©chec est de ne pas avoir le courage dâ€™oser. â€“ AbbÃ© Pierre",
      "Le talent, Ã§a n'existe pas. Le talent, c'est d'avoir l'envie de faire quelque chose. â€“ Jacques Brel",
      "Le plus grand risque est de ne prendre aucun risque. â€“ Mark Zuckerberg",
      "Quand tout semble aller contre vous, souvenez-vous que les avions dÃ©collent contre le vent, pas avec lui. â€“ Henry Ford",
      "Celui qui combat peut perdre, mais celui qui ne combat pas a dÃ©jÃ  perdu. â€“ Bertolt Brecht",
      "L'imagination est plus importante que le savoir. â€“ Albert Einstein",
      "Le bonheur ne se trouve pas au sommet de la montagne, mais dans la faÃ§on de la gravir. â€“ Confucius",
      "Un pessimiste voit la difficultÃ© dans chaque opportunitÃ©, un optimiste voit l'opportunitÃ© dans chaque difficultÃ©. â€“ Winston Churchill",
      "Tout ce que vous avez toujours voulu se trouve de l'autre cÃ´tÃ© de la peur. â€“ George Addair",
      "Agis comme s'il Ã©tait impossible d'Ã©chouer. â€“ Winston Churchill",
      "Le seul moyen de faire un excellent travail est dâ€™aimer ce que vous faites. â€“ Steve Jobs",
      "Le savoir est la seule richesse qui s'accroÃ®t lorsqu'on la partage. â€“ Socrate",
      "Ce nâ€™est pas parce que les choses sont difficiles que nous nâ€™osons pas, câ€™est parce que nous nâ€™osons pas quâ€™elles sont difficiles. â€“ SÃ©nÃ¨que",
      "Chaque jour est une opportunitÃ© de faire mieux quâ€™hier.",
      "Les seules limites de demain sont les doutes dâ€™aujourdâ€™hui. â€“ Franklin D. Roosevelt",
      "La logique vous mÃ¨nera dâ€™un point A Ã  un point B. Lâ€™imagination vous mÃ¨nera partout. â€“ Albert Einstein",
      "Les erreurs sont la preuve que vous essayez.",
      "Il nâ€™y a quâ€™une faÃ§on dâ€™Ã©chouer, câ€™est dâ€™abandonner avant dâ€™avoir rÃ©ussi. â€“ Georges Clemenceau",
      "Ne laisse pas hier prendre trop de place aujourdâ€™hui. â€“ Will Rogers",
      "Les gagnants trouvent des moyens, les perdants des excuses.",
      "RÃªvez grand, commencez petit, mais surtout, commencez.",
      "Ce que lâ€™on fait dans cette vie rÃ©sonne dans lâ€™Ã©ternitÃ©. â€“ Gladiator",
      "Ne laissez pas le bruit des opinions des autres Ã©touffer votre propre voix intÃ©rieure. â€“ Steve Jobs",
      "Une personne qui nâ€™a jamais commis dâ€™erreurs nâ€™a jamais tentÃ© dâ€™innover. â€“ Albert Einstein",
      "Le plus grand danger nâ€™est pas de viser trop haut et dâ€™Ã©chouer, mais de viser trop bas et de rÃ©ussir. â€“ Michel-Ange",
      "Les seules batailles perdues sont celles que lâ€™on ne livre pas. â€“ NapolÃ©on Bonaparte"
    ];
    const quote = quotes[Math.floor(Math.random() * quotes.length)];
    html += `<div class="quote-section"><p>"${quote}"</p></div>`;

    document.getElementById('breadcrumb-current').textContent = breadcrumbCurrent;
    container.innerHTML = html;
  }

  (async function initResume() {
    const params = getQueryParams();
    const data = await loadData();
    renderResume(data, params.type, params.id);
  })();
});
